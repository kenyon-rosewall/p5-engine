#include "P5Engine.h"

internal void
GameOutputSound(game_state* GameState, game_sound_output_buffer* SoundBuffer, int ToneHz)
{
	int16 ToneVolume = 2000;
	int WavePeriod = SoundBuffer->SamplesPerSecond / ToneHz;

	int16* SampleOut = SoundBuffer->Samples;
	for (int SampleIndex = 0; SampleIndex < SoundBuffer->SampleCount; ++SampleIndex)
	{
#if 0
		real32 SineValue = sinf(GameState->tSine);
		int16 SampleValue = (int16)(SineValue * ToneVolume);
#else
		int SampleValue = 0;
#endif
		*SampleOut++ = SampleValue;
		*SampleOut++ = SampleValue;

		real32 TwoPi = 2.0f * Pi32;
		GameState->tSine += TwoPi * 1.0f / (real32)WavePeriod;
		if (GameState->tSine > TwoPi)
		{
			GameState->tSine -= TwoPi;
		}
	}
}

internal void
RenderWeirdGradient(game_offscreen_buffer* Buffer, int BlueOffset, int GreenOffset)
{
	// TODO: Let's see what the optimizer does

	uint8* Row = (uint8*)Buffer->Memory;
	for (int Y = 0; Y < Buffer->Height; ++Y)
	{
		uint32* Pixel = (uint32*)Row;
		for (int X = 0; X < Buffer->Width; ++X)
		{
			uint8 Blue = (uint8)(X + BlueOffset);
			uint8 Green = (uint8)(Y + GreenOffset);
			uint8 Red = 0;

			*Pixel++ = ((Red << 16) | (Green << 8) | Blue);
		}

		Row += Buffer->Pitch;
	}
}

internal void
RenderPlayer(game_offscreen_buffer* Buffer, int PlayerX, int PlayerY)
{
	uint8* EndOfBuffer = (uint8*)Buffer->Memory + Buffer->Pitch * Buffer->Height;
	int Top = PlayerY;
	int Bottom = PlayerY + 10;
	for (int X = PlayerX; X < PlayerX + 10; ++X)
	{
		uint8* Pixel = ((uint8*)Buffer->Memory + X * Buffer->BytesPerPixel + Top * Buffer->Pitch);
		for (int Y = Top; Y < Bottom; ++Y)
		{
			if ((Pixel >= Buffer->Memory) && ((Pixel + 4) < EndOfBuffer))
			{
				*(uint32*)Pixel = 0xFFFF00FF;
				Pixel += Buffer->Pitch;
			}
		}
	}
}

extern "C" GAME_UPDATE_AND_RENDER(GameUpdateAndRender)
{
	Assert((&Input->Controllers[0].Terminator - &Input->Controllers[0].Buttons[0]) == (ArrayCount(Input->Controllers[0].Buttons)));
	Assert(sizeof(game_state) <= Memory->PermanentStorageSize);

	game_state* GameState = (game_state*)Memory->PermanentStorage;
	if (!Memory->IsInitialized)
	{
		char Filename[] = __FILE__;

		debug_read_file_result File = Memory->DEBUGPlatformReadEntireFile(Context, Filename);
		if (File.Contents)
		{
			char WriteFilename[] = "test.txt";
			Memory->DEBUGPlatformWriteEntireFile(Context, WriteFilename, File.ContentsSize, File.Contents);
			Memory->DEBUGPlatformFreeFileMemory(Context, File.Contents);
		}

		GameState->ToneHz = 512;
		GameState->tSine = 0.0f;

		GameState->PlayerX = 100;
		GameState->PlayerY = 100;

		// TODO: This may be more appropriate to do in the platform layer
		Memory->IsInitialized = true;
	}

	for (int ControllerIndex = 0; ControllerIndex < ArrayCount(Input->Controllers); ++ControllerIndex)
	{
		game_controller_input* Controller = GetController(Input, ControllerIndex);
		if (Controller->IsAnalogL || Controller->IsAnalogR)
		{
			// NOTE: Use analog movement tuning
			GameState->BlueOffset += (int)(4.0f * Controller->StickAverageLX);
			GameState->ToneHz = 512 + (int)(1280.0f * Controller->StickAverageRY);
		}
		else
		{
			// NOTE: Use digital movement tuning
		}

		int MoveSpeed = 10;
		if (Controller->MoveUp.EndedDown)
		{
			GameState->PlayerY += -MoveSpeed;
		}
		if (Controller->MoveDown.EndedDown)
		{
			GameState->PlayerY += MoveSpeed;
		}
		if (Controller->MoveRight.EndedDown)
		{
			GameState->PlayerX += MoveSpeed;
		}
		if (Controller->MoveLeft.EndedDown)
		{
			GameState->PlayerX += -MoveSpeed;
		}
	}

	// TODO: Allow sample offsets here for more robust platform options
	// GameOutputSound(SoundBuffer, GameState->ToneHz);
	RenderWeirdGradient(Buffer, GameState->BlueOffset, GameState->GreenOffset);
	RenderPlayer(Buffer, GameState->PlayerX, GameState->PlayerY);
	RenderPlayer(Buffer, Input->MouseX, Input->MouseY);

	for (int ButtonIndex = 0; ButtonIndex < ArrayCount(Input->MouseButtons); ++ButtonIndex)
	{
		if (Input->MouseButtons[ButtonIndex].EndedDown)
		{
			RenderPlayer(Buffer, 10 + 20 * ButtonIndex, 10);
		}
	}
}

extern "C" GAME_GET_SOUND_SAMPLES(GameGetSoundSamples)
{
	game_state* GameState = (game_state*)Memory->PermanentStorage;
	GameOutputSound(GameState, SoundBuffer, GameState->ToneHz);
}